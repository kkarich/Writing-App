"use strict";function DialogController($scope,$mdDialog,$http){$scope.hide=function(){$mdDialog.hide()},$scope.cancel=function(){$mdDialog.cancel()},$scope.answer=function(answer){$mdDialog.hide(answer)},$scope.createContact=function(){$http.post("/contacts",$scope.contact).success(function(data,status,headers,config){$scope.message=data.message}).error(function(data,status,headers,config){console.log("data")})}}var ApplicationConfiguration=function(){var applicationModuleName="popcorn",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils","ngMaterial","btford.socket-io"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.module(ApplicationConfiguration.applicationModuleName).config(["$mdThemingProvider",function($mdThemingProvider){$mdThemingProvider.theme("default").primaryPalette("deep-orange").accentPalette("cyan")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("explore");var myAppModule=angular.module("home",["ngMaterial"]);angular.module("home").config(["$mdThemingProvider",function($mdThemingProvider){$mdThemingProvider.theme("default").primaryPalette("cyan").accentPalette("cyan")}]),myAppModule.controller("homeController",["$scope","$mdDialog",function($scope,$mdDialog){$scope.showForm=function(ev){$mdDialog.show({controller:DialogController,clickOutsideToClose:!0,templateUrl:"/modules/home/mailingListForm.html",targetEvent:ev})}}]),ApplicationConfiguration.registerModule("rooms"),ApplicationConfiguration.registerModule("search"),ApplicationConfiguration.registerModule("users"),ApplicationConfiguration.registerModule("writing-blocks"),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/rooms/create")}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").controller("ToolbarController",["$scope","$mdSidenav","$mdUtil","$log","$location","$state",function($scope,$mdSidenav,$mdUtil,$log,$location,$state){function buildToggler(navID){var debounceFn=$mdUtil.debounce(function(){$mdSidenav(navID).toggle().then(function(){$log.debug("toggle "+navID+" is done")})},300);return debounceFn}console.log($state.current),$scope.toggleLeft=buildToggler("search-panel")}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("explore").config(["$stateProvider",function($stateProvider){$stateProvider.state("explore",{url:"/explore",templateUrl:"modules/explore/views/explore.client.view.html"})}]),angular.module("explore").controller("ExploreController",["$scope","Rooms",function($scope,Rooms){$scope.find=function(){$scope.stories=Rooms.query()}}]),angular.module("rooms").config(["$stateProvider",function($stateProvider){$stateProvider.state("listRooms",{url:"/rooms",templateUrl:"modules/rooms/views/list-rooms.client.view.html"}).state("createRoom",{url:"/rooms/create",templateUrl:"modules/rooms/views/create-room.client.view.html"}).state("viewRoom",{url:"/rooms/:roomId/view",templateUrl:"modules/rooms/views/view-room.client.view.html"}).state("activeRoom",{url:"/rooms/:roomId",templateUrl:"modules/rooms/views/active-room.client.view.html"}).state("editRoom",{url:"/rooms/:roomId/edit",templateUrl:"modules/rooms/views/edit-room.client.view.html"})}]),angular.module("rooms").controller("ActiveRoomController",["$scope","$stateParams","$location","Authentication","Rooms","WritingBlocks","Socket",function($scope,$stateParams,$location,Authentication,Rooms,WritingBlocks,Socket){$scope.authentication=Authentication,$scope.prompt="The detective saw his opportunity. He grabbed the waitressâ€™s arm and said",$scope.queue={currentParticipant:!1,turnTime:3e4,timeLeftInTurn:3e4},$scope.queue.timer,$scope.roomStates={WAITING:"waiting",READY:"ready",ACTIVE:"active",COMPLETED:"completed"},$scope.roomState=$scope.roomStates.WAITING,Socket.on("room.queue.change",function(position){$scope.resetTimer(),$scope.queue.currentParticipant&&$scope.create_block(),$scope.text="",0==position?$scope.queue.currentParticipant=!0:$scope.queue.currentParticipant=!1,$scope.$apply()}),Socket.on("room.queue.start",function(position){$scope.startTimer(),$scope.text="",console.log($scope.queue,position),0==position?$scope.queue.currentParticipant=!0:$scope.queue.currentParticipant=!1,$scope.$apply()}),Socket.on("room.state",function(state){$scope.roomState=state,$scope.$apply()}),Socket.on("room.writing-block.created",function(writingBlock){$scope.writingBlocks.push(writingBlock),$scope.text=""}),Socket.on("text.changed",function(text){$scope.text=text}),$scope.ready=function(){Socket.emit("room.participant.ready",{user:$scope.authentication.user._id,room:$stateParams.roomId})},$scope.inputChanged=function(){$scope.queue.currentParticipant&&Socket.emit("room.text.changed",{room:$stateParams.roomId,text:$scope.text})},$scope.create_block=function(){if(console.log($scope.queue.currentParticipant),$scope.queue.currentParticipant){console.log(this.text,$scope.room);var block=new WritingBlocks({text:$scope.text,room:$stateParams.roomId});block.$save(function(response){},function(errorResponse){$scope.error=errorResponse.data.message})}},$scope.init=function(){$scope.room=Rooms.get({roomId:$stateParams.roomId},function(room){room.completed?(console.log("room is completed"),$scope.roomState=$scope.roomStates.COMPLETED):(Socket.emit("join",{user:$scope.authentication.user._id,room:$stateParams.roomId}),console.log("emit join"))}),$scope.writingBlocks=Rooms.writingBlocks({roomId:$stateParams.roomId})},$scope.startTimer=function(){$scope.queue.timer=setInterval(function(){$scope.queue.timeLeftInTurn-=100,$scope.percentLeft=parseInt($scope.queue.timeLeftInTurn/$scope.queue.turnTime*100),$scope.$apply()},100)},$scope.resetTimer=function(){$scope.queue.timeLeftInTurn=$scope.queue.turnTime}}]),angular.module("rooms").controller("RoomsController",["$scope","$stateParams","$location","Authentication","Rooms","WritingBlocks",function($scope,$stateParams,$location,Authentication,Rooms,WritingBlocks){$scope.authentication=Authentication,$scope.room={prompt:"some random prompt",active:!1,filled:!1},$scope.create=function(){var room=new Rooms({prompt:$scope.room.prompt});room.$save(function(response){$location.path("rooms/"+response._id),$scope.room.prompt=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.join=function(){var room=new Rooms;console.log(room),room.$join(function(response){$location.path("rooms/"+response._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(room){if(room){room.$remove();for(var i in $scope.rooms)$scope.rooms[i]===room&&$scope.rooms.splice(i,1)}else $scope.room.$remove(function(){$location.path("rooms")})},$scope.update=function(){var room=$scope.room;room.$update(function(){$location.path("rooms/"+room._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.rooms=Rooms.query()},$scope.findOne=function(){$scope.room=Rooms.get({roomId:$stateParams.roomId})}}]),angular.module("rooms").factory("Rooms",["$resource",function($resource){return $resource("rooms/:roomId",{roomId:"@_id"},{update:{method:"PUT"},writingBlocks:{url:"/rooms/:roomId/writing-blocks",method:"GET",isArray:!0},join:{url:"/rooms/join",method:"POST"}})}]),angular.module("core").factory("Socket",["socketFactory",function(socketFactory){return socketFactory({prefix:"",ioSocket:io.connect("http://uckk89a260b1.crowdsourcecreativity.koding.io:3000")})}]),angular.module("rooms").factory("WritingBlocks",["$resource",function($resource){return $resource("writing-blocks/:writingBlockId",{writingBlockId:"@_id"},{update:{method:"PUT"}})}]),angular.module("search").controller("SearchNavController",["$scope",function($scope){}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(response){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]),angular.module("writing-blocks").config(["$stateProvider",function($stateProvider){$stateProvider.state("listWritingBlocks",{url:"/writing-blocks",templateUrl:"modules/writing-blocks/views/list-writing-blocks.client.view.html"}).state("createWritingBlock",{url:"/writing-blocks/create",templateUrl:"modules/writing-blocks/views/create-writing-block.client.view.html"}).state("viewWritingBlock",{url:"/writing-blocks/:writingBlockId",templateUrl:"modules/writing-blocks/views/view-writing-block.client.view.html"}).state("editWritingBlock",{url:"/writing-blocks/:writingBlockId/edit",templateUrl:"modules/writing-blocks/views/edit-writing-block.client.view.html"})}]),angular.module("writing-blocks").controller("WritingBlocksController",["$scope","$stateParams","$location","Authentication","WritingBlocks",function($scope,$stateParams,$location,Authentication,WritingBlocks){$scope.authentication=Authentication,$scope.create=function(){var writingBlock=new WritingBlocks({name:this.name});writingBlock.$save(function(response){$location.path("writing-blocks/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(writingBlock){if(writingBlock){writingBlock.$remove();for(var i in $scope.writingBlocks)$scope.writingBlocks[i]===writingBlock&&$scope.writingBlocks.splice(i,1)}else $scope.writingBlock.$remove(function(){$location.path("writing-blocks")})},$scope.update=function(){var writingBlock=$scope.writingBlock;writingBlock.$update(function(){$location.path("writing-blocks/"+writingBlock._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.writingBlocks=WritingBlocks.query()},$scope.findOne=function(){$scope.writingBlock=WritingBlocks.get({writingBlockId:$stateParams.writingBlockId})}}]),angular.module("writing-blocks").factory("WritingBlocks",["$resource",function($resource){return $resource("writing-blocks/:writingBlockId",{writingBlockId:"@_id"},{update:{method:"PUT"}})}]);